name: Draft new release

on:
  workflow_dispatch

permissions:
  contents: read

jobs:
  draft-new-release:
    permissions:
      contents: write  # for Git to git push
    name: Draft a new release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/fix/') || startsWith(github.ref, 'refs/heads/feature/')
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout source branch
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Set Node 16
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 16
          
      # In order to make a commit, we need to initialize a user.
      # You may choose to write something less generic here if you want, it doesn't matter functionality wise.
      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub actions"
          git config user.email noreply@github.com

      # Calculate the next release version based on conventional semantic release
      - name: Create release branch
        id: create-release
        env:
          HUSKY: 0
        run: |
          source_branch_name=${GITHUB_REF##*/}
          release_type=release
          git fetch origin master --depth=1
          git merge origin/master
          current_version=$(jq -r .version package.json)
          
          npx standard-version --skip.commit --skip.tag --skip.changelog
          new_version=$(jq -r .version package.json)
          git reset --hard

          branch_name="${release_type}/${new_version}"

          echo "Source branch for new release is $source_branch_name"
          echo "Current version is $current_version"
          echo "Release type is $release_type"
          echo "New version is $new_version"
          echo "New release branch name is $branch_name"
          git checkout -b "$branch_name"
          git push --set-upstream origin "$branch_name"
          
          echo "source_branch_name=$source_branch_name" >> $GITHUB_OUTPUT
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "CURRENT_VERSION_VALUE=$current_version" >> $GITHUB_ENV
          echo "NEW_VERSION_VALUE=$new_version" >> $GITHUB_ENV

      - name: Update changelog & bump version
        id: finish-release
        env:
          HUSKY: 0
        run: |
          npm i -g conventional-changelog-cli
          SUMMARY=$(((npx conventional-changelog -u) 2>&1) | sed "s/*/<br> */g" | sed "s/#/ /g" | tr -d '\n' || true)
          echo $SUMMARY
          echo "Current version: $CURRENT_VERSION_VALUE"
          echo "New version: $NEW_VERSION_VALUE"
          npx replace $CURRENT_VERSION_VALUE $NEW_VERSION_VALUE README.md
          git add README.md
          echo ${{ steps.create-release.outputs.new_version }}
          echo "commit_summary=$SUMMARY" >> $GITHUB_OUTPUT
          npx standard-version -a

      - name: Push new version in release branch & tag
        run: |
          git push --follow-tags

      - name: Create pull request into master
        uses: repo-sync/pull-request@7e79a9f5dc3ad0ce53138f01df2fad14a04831c5
        with:
          source_branch: ${{ steps.create-release.outputs.branch_name }}
          destination_branch: 'master'
          github_token: ${{ secrets.PAT }}
          pr_title: "chore(release): pulling ${{ steps.create-release.outputs.branch_name }} into master"
          pr_body: ":crown: *An automated PR*\n\n${{ steps.finish-release.outputs.commit_summary }}"
          pr_reviewer: '@rudderlabs/sdk-ios'
